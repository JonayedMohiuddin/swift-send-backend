DROP TABLE QUERY;
DROP TABLE CART_ITEM;
DROP TABLE RATING_REVIEW;
DROP TABLE WISH_LIST;
DROP TABLE NOTIFICATION;
DROP TABLE PRODUCT_PROPERTY;
DROP TABLE SWIFT_SEND_WAREHOUSE_ITEM;
DROP TABLE SUPPLIER_ORDERS;
DROP TABLE ORDER_ITEM;
DROP TABLE PRODUCT;

-- DROP TABLE CART;
DROP TABLE VOUCHER;
DROP TABLE ORDERS;

DROP TABLE ADMIN;
DROP TABLE SUPPLIER;
DROP TABLE CATEGORY;
DROP TABLE PROPERTY;
DROP TABLE NOTIFICATION_TYPE;
DROP TABLE USERS;

CREATE TABLE ADMIN (
    ID          NUMBER GENERATED BY DEFAULT AS IDENTITY, 
    EMAIL       VARCHAR2(100) NOT NULL UNIQUE,
    NAME        VARCHAR2(500) NOT NULL,
    PASSWORD    NUMBER NOT NULL,
    IMAGE_URL   VARCHAR2(1000) DEFAULT '/images/no-profile-picture.jpg',
    ADDRESS     VARCHAR2(1000),

    CONSTRAINT ADMIN_PK PRIMARY KEY(ID)
);

CREATE TABLE SUPPLIER (
    ID          NUMBER GENERATED BY DEFAULT AS IDENTITY,
	EMAIL	    VARCHAR2(100) NOT NULL UNIQUE,
    NAME        VARCHAR2(500) NOT NULL,
    PASSWORD    NUMBER NOT NULL,
    IMAGE_URL   VARCHAR2(1000) DEFAULT '/images/no-profile-picture.jpg',
    DESCRIPTION VARCHAR2(3000),
    ADDRESS     VARCHAR2(1000),
    
    CONSTRAINT SUPPLIER_PK PRIMARY KEY(ID)
);

DROP SEQUENCE USERS_SEQUENCE;
CREATE SEQUENCE USERS_SEQUENCE START WITH 1 INCREMENT BY 1;

CREATE TABLE USERS (
--     ID                  NUMBER GENERATED BY DEFAULT AS IDENTITY,
    ID                  NUMBER DEFAULT USERS_SEQUENCE.NEXTVAL NOT NULL,
    EMAIL               VARCHAR2(100) NOT NULL UNIQUE,
    NAME                VARCHAR2(500) NOT NULL,
    PASSWORD            NUMBER NOT NULL,
    PHONE               VARCHAR2(100),
    DATE_OF_BIRTH       DATE,
    IMAGE_URL           VARCHAR2(1000) DEFAULT '/images/no-profile-picture.jpg',
    ADDRESS             VARCHAR2(1000),

    CREATED_ON          DATE DEFAULT SYSDATE,
    LAST_UPDATED_ON     DATE,
    
    CONSTRAINT USERS_PK PRIMARY KEY(ID)
);

CREATE TABLE QUERY (
    ID                  NUMBER GENERATED BY DEFAULT AS IDENTITY,
    USER_ID             NUMBER,
    SUPPLIER_ID         NUMBER,
    MESSAGE             VARCHAR2(1000) NOT NULL,
    REPLY               VARCHAR2(1000),
    
    CREATED_ON          DATE DEFAULT SYSDATE,
    LAST_UPDATED_ON     DATE,
    
    CONSTRAINT QUERY_PK PRIMARY KEY(ID),
    CONSTRAINT QUERY_USER_FK FOREIGN KEY(USER_ID) REFERENCES USERS(ID) ON DELETE SET NULL,
    CONSTRAINT QUERY_SUPPLIER_FK FOREIGN KEY(SUPPLIER_ID) REFERENCES SUPPLIER(ID) ON DELETE SET NULL
);

CREATE TABLE CATEGORY (
    ID              NUMBER GENERATED BY DEFAULT AS IDENTITY,
    NAME            VARCHAR2(100) UNIQUE,
    DESCRIPTION     VARCHAR2(3000) DEFAULT 'Discover an unparalleled selection of the finest products in this category. Our curated collection showcases the pinnacle of quality, craftsmanship, and innovation, ensuring that you find exactly what youre looking for. Whether youre seeking the latest cutting-edge offerings or timeless classics, our extensive range has something to cater to every taste and preference. Explore a world of possibilities as we bring together the most sought-after brands and products from around the globe. Our team of experts meticulously handpicks each item, ensuring that only the best makes it to our shelves. With a commitment to excellence, we leave no stone unturned in our pursuit of sourcing the most exceptional products for your utmost satisfaction. Step into a realm of unparalleled convenience and immerse yourself in a seamless shopping experience. Our user-friendly platform and intuitive navigation make it easy to discover your desired products, compare features, and make informed decisions. Detailed product descriptions, high-quality images, and customer reviews provide you with a comprehensive understanding of each item, allowing you to shop with confidence. At the core of our philosophy lies a deep-rooted passion for delivering exceptional customer service. Our dedicated team is always on hand to assist you, offering personalized recommendations, addressing inquiries, and ensuring that your shopping journey is nothing short of remarkable. We value your trust and strive to exceed your expectations with every interaction. Embrace the convenience of secure and efficient transactions, with a range of payment options tailored to your preferences. Our trusted shipping partners ensure that your purchases are delivered promptly and in pristine condition, no matter your location.Join our ever-growing community of satisfied customers and embark on a journey of discovery, indulgence, and unmatched quality. Browse our extensive collection today and elevate your lifestyle with the finest products this category has to offer.',
    IMAGE_URL       VARCHAR2(1000) DEFAULT '/images/no-category-image.jpg',
	
    CONSTRAINT CATEGORY_PK PRIMARY KEY(ID)
);

CREATE TABLE PRODUCT (
    ID                  NUMBER GENERATED BY DEFAULT AS IDENTITY,
    SUPPLIER_ID         NUMBER,
    CATEGORY_ID         NUMBER,
    NAME                VARCHAR2(500) NOT NULL,
    PRICE               NUMBER NOT NULL CONSTRAINT MIN_PRICE CHECK (PRICE > 0),
    DESCRIPTION         VARCHAR2(3000) DEFAULT 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum vestibulum vitae erat id pulvinar. Nullam in sagittis sapien. Etiam eget mollis tortor. Nunc porta, turpis at pretium cursus, lacus ligula imperdiet est, vel ultricies eros magna ut nunc. Donec blandit vehicula augue a ornare. Aliquam lorem nisl, congue in venenatis at, hendrerit vel enim. Suspendisse at nulla luctus neque sollicitudin lobortis. Etiam sed lorem et lectus mollis laoreet. Nunc tortor ante, gravida quis nisi quis, scelerisque cursus justo. Nam porta risus ipsum. Pellentesque tristique magna tortor, in consectetur arcu facilisis vel. Vestibulum sed ex semper, finibus lacus non, cursus elit. Cras vitae lectus dolor. Quisque a lacus nec velit euismod ultrices. Morbi nec bibendum erat. ' || CHR(10) || 'Maecenas nunc erat, vestibulum in tempus at, mollis eu metus. Aliquam sit amet augue vitae massa ornare tempus. Ut pretium ex libero. Pellentesque vel dui mattis, vehicula quam vel, rhoncus arcu. Vestibulum ac metus leo. Praesent gravida nec ante lacinia tristique. Nullam sollicitudin, ligula eu lobortis bibendum, arcu nulla viverra mi, ac tempor erat tellus in tortor. Sed a velit bibendum, sollicitudin dui eget, sagittis mi. Cras fringilla tincidunt nisl, id vulputate purus. Duis in massa mattis, pharetra nibh et, pharetra enim. Cras aliquam ex sed sapien scelerisque aliquam. ' || CHR(10) || 'Nam ut elementum neque, accumsan interdum diam. Integer quis pulvinar dui. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin in nisl faucibus, congue orci in, commodo quam. Duis commodo risus at est dapibus, nec tincidunt sapien vulputate. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Curabitur tortor ex, cursus id diam in, sagittis ultricies ipsum. Duis ut magna nec lectus auctor luctus ac ut quam. Cras maximus nibh quis tortor semper faucibus. In eleifend lobortis interdum. Nunc in dui sollicitudin, auctor arcu vitae, pretium ligula. ' || CHR(10) || 'Nunc condimentum dui eget metus auctor, quis vehicula sapien vestibulum. Phasellus consectetur mauris et arcu porttitor, eu sodales quam congue. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Maecenas convallis odio ut augue ullamcorper scelerisque. Mauris eget massa ac purus semper varius at eget turpis. Proin eu lorem aliquet, sodales magna id, euismod odio. In eu urna fringilla, dictum diam sed, commodo dolor. Donec volutpat, nibh maximus ullamcorper lobortis, ante nibh suscipit risus, quis pellentesque turpis odio ac velit. Praesent libero elit, tempor a bibendum at, consectetur ut enim. Praesent ac lorem lacinia, molestie mi cursus, vehicula augue.',
    IMAGE_URL           VARCHAR2(1000) DEFAULT '/images/no-product-image.jpg',
    DISCOUNT            NUMBER DEFAULT 0,
	IS_DELETED 			NUMBER DEFAULT 0, -- TRUE, FALSE
    
--     RATING_COUNT        NUMBER DEFAULT 0,
--     TOTAL_RATING        NUMBER DEFAULT 0,

    CREATED_ON          DATE DEFAULT SYSDATE,
    LAST_UPDATED_ON     DATE,
    
    CONSTRAINT PRODUCT_PK PRIMARY KEY(ID),
    CONSTRAINT PRODUCT_SUPPLIER_FK FOREIGN KEY(SUPPLIER_ID) REFERENCES SUPPLIER(ID) ON DELETE CASCADE,
    CONSTRAINT PRODUCT_CATEGORY_FK FOREIGN KEY(CATEGORY_ID) REFERENCES CATEGORY(ID) ON DELETE SET NULL
);

CREATE TABLE PROPERTY (
    ID              NUMBER GENERATED BY DEFAULT AS IDENTITY,
    NAME            VARCHAR2(100) NOT NULL,
    DESCRIPTION     VARCHAR2(3000),
    DURATION        NUMBER DEFAULT 0,
    
    CONSTRAINT      PROPERTY_PK PRIMARY KEY(ID)
);

CREATE TABLE PRODUCT_PROPERTY (
    PRODUCT_ID  NUMBER,
    PROPERTY_ID NUMBER,

    CONSTRAINT PRODUCT_PROPERTY_PK PRIMARY KEY (PRODUCT_ID, PROPERTY_ID),
    CONSTRAINT PRODUCT_PROPERTY_PRODUCT_FK FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(ID),
    CONSTRAINT PRODUCT_PROPERTY_PROPERTY_FK FOREIGN KEY (PROPERTY_ID) REFERENCES PRODUCT(ID)
);

CREATE TABLE CART_ITEM (
    ID                NUMBER GENERATED BY DEFAULT AS IDENTITY,
    USER_ID           NUMBER,
    PRODUCT_ID        NUMBER UNIQUE,
    QUANTITY          NUMBER DEFAULT 1 NOT NULL,    

    CONSTRAINT CART_ITEM_PK PRIMARY KEY(ID),
    CONSTRAINT CART_ITEM_USER_FK FOREIGN KEY(USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE,
    CONSTRAINT CART_ITEM_PRODUCT_FK FOREIGN KEY(PRODUCT_ID) REFERENCES PRODUCT(ID) ON DELETE CASCADE
);

-- CREATE TABLE CART (
--     ID            NUMBER GENERATED BY DEFAULT AS IDENTITY,
--     USER_ID       NUMBER,
--     STATUS        VARCHAR2(50),
--     CREATED_ON    DATE DEFAULT SYSDATE,
    
--     CONSTRAINT CART_PK PRIMARY KEY(ID),
--     CONSTRAINT CART_USER_FK FOREIGN KEY(USER_ID) REFERENCES USERS(ID)
-- );

-- CREATE TABLE CART_ITEM (
--     ID                NUMBER GENERATED BY DEFAULT AS IDENTITY,
--     CART_ID           NUMBER,
--     PRODUCT_ID        NUMBER,
--     QUANTITY          NUMBER DEFAULT 1 NOT NULL,    

--     CONSTRAINT CART_ITEM_PK PRIMARY KEY(ID),
--     CONSTRAINT CART_ITEM_CART_FK FOREIGN KEY(CART_ID) REFERENCES CART(ID),
--     CONSTRAINT CART_ITEM_PRODUCT_FK FOREIGN KEY(PRODUCT_ID) REFERENCES PRODUCT(ID)
-- );

CREATE TABLE ORDERS (
    ID                  NUMBER GENERATED BY DEFAULT AS IDENTITY,
    USER_ID             NUMBER NOT NULL,
    PHONE_1             VARCHAR2(20),
    PHONE_2             VARCHAR2(20),
    VOUCHER_ID        	NUMBER, 
    ADDRESS             VARCHAR2(1000),
    CREATED_AT          DATE DEFAULT SYSDATE,

    CONSTRAINT ORDERS_PK PRIMARY KEY(ID),
    CONSTRAINT ORDERS_USER_FK FOREIGN KEY(USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE
);

CREATE TABLE ORDER_ITEM (
    ID                  NUMBER GENERATED BY DEFAULT AS IDENTITY,
    QUANTITY            NUMBER DEFAULT 1 NOT NULL,
    ORDER_ID            NUMBER,
    PRODUCT_ID          NUMBER,
    STATUS              VARCHAR2(50), -- PENDING, SHIPPED, DELIVERED, CANCELED
	LAST_UPDATED_ON     DATE DEFAULT SYSDATE,

    CONSTRAINT ORDER_ITEM_PK PRIMARY KEY(ID),
    CONSTRAINT ORDER_ITEM_ORDERS_FK FOREIGN KEY(ORDER_ID) REFERENCES ORDERS(ID) ON DELETE SET NULL,
    CONSTRAINT ORDER_ITEM_PRODUCT_FK FOREIGN KEY(PRODUCT_ID) REFERENCES PRODUCT(ID) 
);

CREATE TABLE SWIFT_SEND_WAREHOUSE_ITEM (
    ID                  NUMBER GENERATED BY DEFAULT AS IDENTITY,
    ADDRESS             VARCHAR2(1000),
	ORDER_ITEM_ID       NUMBER,
    USER_ID             NUMBER,
    STATUS              VARCHAR2(50) DEFAULT 'PENDING', -- PENDING, DELIVERED (CANNOT BE CANCELED)
    CREATED_AT          DATE DEFAULT SYSDATE,
    
    CONSTRAINT SWIFT_SEND_WAREHOUSE_ITEM_PK PRIMARY KEY(ID),
    CONSTRAINT SWIFT_SEND_WAREHOUSE_ITEM_USER_FK FOREIGN KEY(USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE,
    CONSTRAINT SWIFT_SEND_WAREHOUSE_ITEM_ORDER_ITEM_FK FOREIGN KEY(ORDER_ITEM_ID) REFERENCES ORDER_ITEM(ID)
);

CREATE TABLE SUPPLIER_ORDERS (
    ID                  NUMBER GENERATED BY DEFAULT AS IDENTITY,
    ORDER_ITEM_ID       NUMBER,
    USER_ID             NUMBER,
    SUPPLIER_ID         NUMBER,
    ADDRESS             VARCHAR2(1000),
    STATUS              VARCHAR2(50) DEFAULT 'PENDING', -- PENDING, SHIPPED, CANCELED
    CREATED_AT          DATE DEFAULT SYSDATE,
    
    CONSTRAINT SUPPLIER_PENDING_ORDERS_PK PRIMARY KEY(ID),
    CONSTRAINT SUPPLIER_PENDING_ORDERS_SUPPLIER_FK FOREIGN KEY(SUPPLIER_ID) REFERENCES SUPPLIER(ID) ON DELETE SET NULL,
    CONSTRAINT SUPPLIER_PENDING_ORDERS_USER_FK FOREIGN KEY(USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE,
    CONSTRAINT SUPPLIER_PENDING_ORDERS_ORDER_ITEM_FK FOREIGN KEY(ORDER_ITEM_ID) REFERENCES ORDER_ITEM(ID)
);

CREATE TABLE VOUCHER (
    ID              NUMBER GENERATED BY DEFAULT AS IDENTITY,
    SUPPLIER_ID     NUMBER,
    DESCRIPTION     VARCHAR2(1000),
    DISCOUNT        NUMBER NOT NULL,
    VALIDITY        DATE,
    CAP             NUMBER default 250,

    CONSTRAINT  VOUCHER_PK PRIMARY KEY(ID),
    CONSTRAINT  VOUCHER_SUPPLIER_FK FOREIGN KEY(SUPPLIER_ID) REFERENCES SUPPLIER(ID)
);

CREATE TABLE RATING_REVIEW (
    ID          NUMBER GENERATED BY DEFAULT AS IDENTITY,
    USER_ID     NUMBER,
    PRODUCT_ID  NUMBER,
    RATING      NUMBER,
    REVIEW      VARCHAR2(1000),
	RESPONSE    VARCHAR2(1000) DEFAULT NULL,

    CREATED_ON          DATE DEFAULT SYSDATE,
    LAST_UPDATED_ON     DATE DEFAULT SYSDATE,

    CONSTRAINT RATING_PK PRIMARY KEY (ID),
    CONSTRAINT RATING_USER_FK FOREIGN KEY (USER_ID) REFERENCES USERS (ID) ON DELETE SET NULL,
    CONSTRAINT RATING_PRODUCT_FK FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT (ID) ON DELETE CASCADE
);

CREATE TABLE WISH_LIST (
    USER_ID         NUMBER,
    PRODUCT_ID      NUMBER,

    CONSTRAINT WISH_LIST_PK PRIMARY KEY(USER_ID, PRODUCT_ID),
    CONSTRAINT WISH_LIST_USER_FK FOREIGN KEY(USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE,
    CONSTRAINT WISH_LIST_PRODUCT_FK FOREIGN KEY(PRODUCT_ID) REFERENCES PRODUCT(ID) ON DELETE CASCADE
);

CREATE TABLE NOTIFICATION_TYPE (
    ID              NUMBER GENERATED BY DEFAULT AS IDENTITY,
    NAME            VARCHAR2(100) NOT NULL,
    DESCRIPTION     VARCHAR2(3000),

    CONSTRAINT NOTIFICATION_TYPE_PK PRIMARY KEY(ID)
);

CREATE TABLE NOTIFICATION (
    ID              NUMBER GENERATED BY DEFAULT AS IDENTITY,
    USER_ID         NUMBER,
    TYPE_ID         NUMBER,
    MESSAGE         VARCHAR2(1000),
    SENT_AT         DATE DEFAULT SYSDATE,
    IS_READ         NUMBER DEFAULT 0,
    URL             VARCHAR2(1000),

    CONSTRAINT NOTIFICATION_PK PRIMARY KEY(ID),
    CONSTRAINT NOTIFICATION_USER_FK FOREIGN KEY(USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE,
    CONSTRAINT NOTIFICATION_TYPE_FK FOREIGN KEY(TYPE_ID) REFERENCES NOTIFICATION_TYPE(ID) ON DELETE CASCADE
);



-- PL/SQL PROCEDURE(1), FUNCTIONS(1), TRIGGERS(3)

-- FUNCTIONS

CREATE OR REPLACE FUNCTION HASH_PASSWORD(PSW IN VARCHAR2) RETURN NUMBER IS
    HASHED_VALUE NUMBER;
BEGIN
    SELECT ORA_HASH(PSW, 2000) INTO HASHED_VALUE FROM DUAL;
    RETURN HASHED_VALUE;
END;
/

CREATE OR REPLACE FUNCTION CANCEL_ORDER_ITEM(CANCEL_ORDER_ITEM_ID IN NUMBER) RETURN VARCHAR2 IS
	MSG            VARCHAR2(500);
	ORDER_STATUS   VARCHAR2(500);
	PRODUCT_NAME   VARCHAR2(500);
BEGIN 
	SELECT STATUS INTO ORDER_STATUS 
	FROM ORDER_ITEM
	WHERE ID = CANCEL_ORDER_ITEM_ID;
	
	IF ORDER_STATUS = 'CANCELED' THEN
		MSG := 'ORDER ALREADY CANCELED';
		RETURN MSG;
	ELSIF ORDER_STATUS = 'DELIVERED' THEN
		MSG :=  'ORDER ALREADY DELIVERED CANT CANCEL';
		RETURN MSG;
	ELSIF ORDER_STATUS = 'SHIPPED' THEN
		MSG :=  'ORDER SHIPPED CANT CANCEL NOW';
		RETURN MSG;
	ELSIF ORDER_STATUS <> 'PENDING' THEN
		MSG :=  'UNKNOW STATUS. INTERNAL DATABASE MANAGEMENT ERROR.';
		RETURN MSG;
	END IF;
		
	UPDATE ORDER_ITEM
	SET STATUS = 'CANCELED'
	WHERE ID = CANCEL_ORDER_ITEM_ID;
	
	SELECT NAME INTO PRODUCT_NAME
	FROM PRODUCT 
	WHERE ID = (
		SELECT PRODUCT_ID
		FROM ORDER_ITEM
		WHERE ID = CANCEL_ORDER_ITEM_ID
	);
	
	-- DELETE FROM SUPPLIER_PENDING_ORDERS WHERE ORDER_ITEM_ID = CANCEL_ORDER_ITEM_ID;
    UPDATE SUPPLIER_ORDERS SET STATUS = 'CANCELED' WHERE ORDER_ITEM_ID = CANCEL_ORDER_ITEM_ID;
	
	MSG := 'CANCELED ORDER FOR ' || PRODUCT_NAME;
	RETURN MSG;
	
EXCEPTION 
    WHEN NO_DATA_FOUND THEN
		MSG := 'NOT FOUND. INTERNAL SERVER ERROR';
		RETURN MSG;
	WHEN OTHERS THEN
		MSG := 'UNKNOWN ERROR OCCURED. ERROR : ' || SQLERRM;
		RETURN MSG;
END;
/

BEGIN 
	DBMS_OUTPUT.PUT_LINE(CANCEL_ORDER_ITEM(4));
END;
/

-- PROCEDURES

CREATE OR REPLACE PROCEDURE ADD_OR_UPDATE_CART_ITEM(USER_ID_VALUE IN NUMBER, PRODUCT_ID_VALUE IN NUMBER, QUANTITY_VALUE IN NUMBER) IS 
	CART_ID_VALUE NUMBER;
BEGIN
    SELECT ID INTO CART_ID_VALUE
    FROM CART_ITEM CI
    WHERE CI.PRODUCT_ID = PRODUCT_ID_VALUE;
    UPDATE CART_ITEM SET QUANTITY = QUANTITY + QUANTITY_VALUE WHERE ID = CART_ID_VALUE;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        INSERT INTO CART_ITEM(USER_ID, PRODUCT_ID, QUANTITY) VALUES(USER_ID_VALUE, PRODUCT_ID_VALUE, QUANTITY_VALUE);
END;
/

CREATE OR REPLACE PROCEDURE ADD_ORDERS_FROM_CART (USER_ID_PARAM IN NUMBER, ADDRESS_PARAM IN VARCHAR2 DEFAULT NULL) IS
    CART_ID_VALUE  NUMBER;
    ORDER_ID_VALUE NUMBER;
    ADDRESS_VALUE  VARCHAR2(1000);
BEGIN 
    IF ADDRESS_PARAM IS NULL THEN
        SELECT ADDRESS INTO ADDRESS_VALUE FROM USERS WHERE ID = USER_ID_PARAM;
    ELSE
        ADDRESS_VALUE := ADDRESS_PARAM;
    END IF;

    INSERT INTO ORDERS(USER_ID, ADDRESS) VALUES(USER_ID_PARAM, ADDRESS_VALUE) RETURNING ID INTO ORDER_ID_VALUE;

    FOR ITEM IN (SELECT * FROM CART_ITEM WHERE USER_ID = USER_ID_PARAM) LOOP
        INSERT INTO ORDER_ITEM(ORDER_ID, PRODUCT_ID, QUANTITY, STATUS) VALUES(ORDER_ID_VALUE, ITEM.PRODUCT_ID, ITEM.QUANTITY, 'PENDING');
    END LOOP;

    DELETE FROM CART_ITEM WHERE USER_ID = USER_ID_PARAM;
END;
/

-- BEGIN
--     ADD_ORDERS_FROM_CART(1, 'Kathmandu');
-- END;
-- /

-- TRIGGERS

CREATE OR REPLACE TRIGGER USER_ADDED_ORDER_ITEM
AFTER INSERT 
ON ORDER_ITEM
FOR EACH ROW
DECLARE
    SUPPLIER_ID_VALUE NUMBER;
    USER_ID_VALUE NUMBER;
    ADDRESS_VALUE VARCHAR2(1000);
BEGIN
    SELECT SUPPLIER_ID INTO SUPPLIER_ID_VALUE FROM PRODUCT WHERE ID = :NEW.PRODUCT_ID;
    SELECT USER_ID INTO USER_ID_VALUE FROM ORDERS WHERE ID = :NEW.ORDER_ID;
    SELECT ADDRESS INTO ADDRESS_VALUE FROM ORDERS WHERE ID = :NEW.ORDER_ID;

    INSERT INTO SUPPLIER_ORDERS(SUPPLIER_ID, USER_ID, ORDER_ITEM_ID, ADDRESS) VALUES(
        SUPPLIER_ID_VALUE,
        USER_ID_VALUE,
        :NEW.ID,
        ADDRESS_VALUE
    );
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20001, 'No data found');
    WHEN OTHERS THEN
        RAISE;
END;
/

CREATE OR REPLACE TRIGGER SUPPLIER_SHIPPED_ORDER_ITEM
BEFORE UPDATE
ON SUPPLIER_ORDERS
FOR EACH ROW
DECLARE 
	ORDER_STATUS   VARCHAR2(255);
    INVALID_ACTION EXCEPTION;
	
BEGIN
    SELECT STATUS INTO ORDER_STATUS FROM ORDER_ITEM WHERE ID = :OLD.ORDER_ITEM_ID;

    IF :OLD.STATUS = 'PENDING' AND :NEW.STATUS = 'SHIPPED' THEN
        UPDATE ORDER_ITEM SET STATUS = 'SHIPPED', LAST_UPDATED_ON = SYSDATE WHERE ID = :OLD.ORDER_ITEM_ID;
        INSERT INTO SWIFT_SEND_WAREHOUSE_ITEM(ORDER_ITEM_ID, USER_ID, ADDRESS) VALUES(:OLD.ORDER_ITEM_ID, :OLD.USER_ID, :OLD.ADDRESS);
    ELSIF :OLD.STATUS = 'PENDING' AND :NEW.STATUS = 'CANCELED' THEN
        UPDATE ORDER_ITEM SET STATUS = 'CANCELED' WHERE ID = :OLD.ORDER_ITEM_ID;
--     ELSIF :OLD.STATUS = 'SHIPPED' THEN
--         RAISE INVALID_ACTION;
--     ELSE 
--         RAISE INVALID_ACTION;
    END IF;
-- EXCEPTION
--     WHEN INVALID_ACTION THEN
--         RAISE_APPLICATION_ERROR(-20001, 'CANNOT SHIP ORDER');
--     WHEN OTHERS THEN
--         RAISE;
END;
/

CREATE OR REPLACE TRIGGER PRODUCT_DELIVERED
BEFORE UPDATE
ON SWIFT_SEND_WAREHOUSE_ITEM
FOR EACH ROW
BEGIN 
    IF :OLD.STATUS = 'PENDING' AND :NEW.STATUS = 'DELIVERED' THEN
        UPDATE ORDER_ITEM SET STATUS = 'DELIVERED', LAST_UPDATED_ON = SYSDATE WHERE ID = :OLD.ORDER_ITEM_ID;
    ELSIF :OLD.STATUS = 'DELIVERED' THEN
        RAISE_APPLICATION_ERROR(-20001, 'ORDER ALREADY DELIVERED');
    ELSIF :NEW.STATUS = 'CANCELED' THEN
        RAISE_APPLICATION_ERROR(-20001, 'ORDER CANNOT BE CANCELED WHEN SHIPPED');
    ELSE 
        RAISE_APPLICATION_ERROR(-20001, 'ORDER SHOULD PHASE FROM PENDING TO DELIVERED');
    END IF;

    -- UPDATE ORDER_ITEM SET STATUS = 'DELIVERED' WHERE ID = :OLD.ORDER_ITEM_ID;
END;
/

/*
 *** CHECK ERRORS IN SQL*PLUS ***
 SHOW ERRORS PROCEDURE ADD_OR_UPDATE_CART_ITEM;

BEGIN
	ADD_OR_UPDATE_CART_ITEM(1, 1, 1);
END;

*/

